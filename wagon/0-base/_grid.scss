@use "sass:math";
@use "../1-abstracts/breakpoints" as *;

$grid-columns: 12;
$grid-gaps: (
    "0": 0,
    "sm": 6px,
    "md": 12px,
    "lg": 18px,
    "xl": 24px,
);
$justify-values: flex-start, flex-end, center, space-between, space-around;
$align-values: flex-start, flex-end, center, baseline, stretch;

// base layout classes
.container {
    width: 100%;
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}

.row {
    display: flex;
    flex-flow: row wrap;
}

// grid gaps
@each $k, $v in $grid-gaps {
    .gap-#{$k} > * {
        padding: $v;
    }
    .gap-#{$k} {
        margin-inline: -$v;
    }
}

// justify content classes
@each $val in $justify-values {
    .justify-#{$val} {
        justify-content: $val;
    }
}
@each $val in $align-values {
    .align-#{$val} {
        align-items: $val;
    }
}

// col classes
@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include sm {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include lg {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xxl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xxl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

// grid layout shortcut class
@include xs {
    .std-grid-layout {
        display: flex;
        flex-flow: row wrap;

        & > * {
            box-sizing: border-box;
            flex-grow: 0;
            width: 100%;
        }
    }
}
@include sm {
    .std-grid-layout {
        display: flex;
        flex-flow: row wrap;

        & > * {
            box-sizing: border-box;
            flex-grow: 0;
            width: 50%;
        }
    }
}
@include lg {
    .std-grid-layout {
        display: flex;
        flex-flow: row wrap;

        & > * {
            box-sizing: border-box;
            flex-grow: 0;
            width: 25%;
        }
    }
}
